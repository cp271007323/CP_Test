//
//  CPTableView.m
//  绘制-tableView
//
//  Created by lk06 on 17/1/13.
//  Copyright © 2017年 lk06. All rights reserved.
//

#import "CPPromptBoxView.h"

typedef enum : NSUInteger {
    PromitBoxDirection_up,
    PromitBoxDirection_down,
} PromitBoxDirection;

#define ScreenWidth [UIScreen mainScreen].bounds.size.width
#define ScreenHeight [UIScreen mainScreen].bounds.size.height
#define Height  40
#define space_For_LeftAndRight   10
#define Animation_appear    @[@0,@1.2,@1]
#define Animation_disappear @[@1,@1.2,@0]

@interface CPPromptBoxView ()<CPPromptBoxDelegate,CAAnimationDelegate>
{
    CPPromptBox *promitBox;
    UIView *backView;
}

@property (nonatomic , strong) NSMutableArray *blocks;
@property (nonatomic , strong) NSMutableArray *Arr;
@end

@implementation CPPromptBoxView
#pragma mark - get
-(NSMutableArray *)Arr{
    if (!_Arr) {
        _Arr = [NSMutableArray array];
    }
    return _Arr;
}


-(NSMutableArray *)blocks{
    if (!_blocks) {
        _blocks = [NSMutableArray array];
    }
    return _blocks;
}

-(void)setCurrentChoose:(NSInteger)currentChoose{
    _currentChoose = currentChoose;
    promitBox.currentChoose = _currentChoose;
}

-(void)setTextAlignment:(NSTextAlignment)textAlignment{
    _textAlignment = textAlignment;
    promitBox.textAlignment = _textAlignment;
}

-(void)setColor:(UIColor *)color{
    _color = color;
    promitBox.color = _color;
}

-(void)setTextColor:(UIColor *)textColor{
    _textColor = textColor;
    promitBox.textColor = _textColor;
}

-(void)setWidth:(CGFloat)width{
    _width = width;
    promitBox.width = _width;
}

-(void)setType:(CPPromptBoxView_TYPE)type{
    _type = type;
    promitBox.type = _type;
}

-(void)setCellEdgeInsets:(UIEdgeInsets)cellEdgeInsets{
    _cellEdgeInsets = cellEdgeInsets;
    promitBox.cellEdgeInsets = _cellEdgeInsets;
}

-(void)setRadiu:(CGFloat)radiu{
    _radiu = radiu;
    promitBox.radiu = _radiu;
}

-(void)setSeparatorColor:(UIColor *)separatorColor{
    _separatorColor = separatorColor;
    promitBox.separatorColor = _separatorColor;
}

#pragma mark - 实例方法
+(instancetype)PromptBoxViewWithClipView:(UIView *)clipView{
    CPPromptBoxView *promitBoxView = [[CPPromptBoxView alloc]initWithWithClipView:clipView];
    return promitBoxView;
}

- (instancetype)initWithWithClipView:(UIView *)clipView
{
    self = [super initWithFrame:[UIScreen mainScreen].bounds];
    if (self) {
        
        [self initData];
        
        backView = [[UIView alloc]initWithFrame:self.bounds];
        backView.backgroundColor = [UIColor clearColor];
        [backView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tap:)]];
        [self addSubview:backView];
        
        promitBox = [CPPromptBox promtBoxWithClipView:clipView];
        [self initDataWithPromitBox];
        [self addSubview:promitBox];
    }
    return self;
}

- (void)initData{
    self.type = CPPromptBoxView_TYPE_Others;
    self.radiu = 4;
    self.triangleHeight = 10;
    self.triangleBottomWidth = 10;
    self.width = 200;
    self.color = [UIColor whiteColor];
    self.textColor = [UIColor whiteColor];
    self.textAlignment = NSTextAlignmentLeft;
    self.backgroundColor = [UIColor clearColor];
    self.cellEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
}

- (void)initDataWithPromitBox{
    promitBox.radiu = self.radiu;
    promitBox.triangleHeight = self.triangleHeight;
    promitBox.triangleBottomWidth = self.triangleBottomWidth;
    promitBox.width = self.width;
    promitBox.color = self.color;
    promitBox.textColor = self.textColor;
    promitBox.textAlignment = self.textAlignment;
    promitBox.promitBoxDeleget = self;
    promitBox.blocks = self.blocks;
    promitBox.type = self.type;
    promitBox.cellEdgeInsets = self.cellEdgeInsets;
}

- (void)show{
    [theWindow addSubview:self];
}

#pragma mark - 添加内容
- (void)addTitle:(NSMutableArray *)title image:(NSMutableArray *)image clipBack:(CPPromptBoxClipBlock)block{
    
    promitBox.titles = title;
    promitBox.images = image;
    
    [self.blocks addObject:block];
    [promitBox refreshPromitBoxView];
}


- (void)addTitle:(NSArray *)title images:(NSArray *)images clipBack:(CPPromptBoxClipBlock)block{
    
    [self addTitle:(NSMutableArray *)title image:(NSMutableArray *)images clipBack:^(NSIndexPath *indexPath) {
        if (block) {
            block(indexPath);
        }
    }];
}


#pragma mark - CPPromptBoxDelegate
-(void)promptBoxSelector:(CPPromptBoxClipBlock)clipblock indexPath:(NSIndexPath *)indexPath{
    if (clipblock) {
        clipblock(indexPath);
        [self promitBoxViewRemoveFromSuperview];
    }
}

-(void)tap:(UITapGestureRecognizer *)tap{
    [promitBox promitBoxRemoveFromSuperViewWithValues:Animation_disappear isDelegate:YES];
    [self promitBoxViewRemoveFromSuperview];
}

#pragma mark - CAAnimationDelegate
-(void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag{
    [self promitBoxViewRemoveFromSuperview];
}

//移除全部视图
-(void)promitBoxViewRemoveFromSuperview{
    if (self.cancleBlock) {
        self.cancleBlock();
    }
    __weak typeof(self) weakself = self;
    [UIView animateWithDuration:.3 animations:^{
        weakself.alpha = 0;
    } completion:^(BOOL finished) {
        [backView removeFromSuperview];
        [weakself removeFromSuperview];
    }];
}

-(void)dealloc{
    _blocks = nil;
    backView = nil;
    promitBox.promitBoxDeleget = nil;
    promitBox = nil;
    _color = nil;
    _textColor = nil;
    _clipView = nil;
}

@end


@interface CPPromptBox ()<UITableViewDelegate,UITableViewDataSource,CAAnimationDelegate>
{
    UITableView *_tableview;
    UITableViewCell *preCell;
}
@property (nonatomic , assign) PromitBoxDirection direction;
@property (nonatomic , assign) CGPoint         triangleTopPoint;    //三角形顶点
@property (nonatomic , assign) CGPoint          clipViewCenterInWindow;
@end

@implementation CPPromptBox

#pragma mark - get

-(void)setWidth:(CGFloat)width{
    if (width > (ScreenWidth - 2 * space_For_LeftAndRight)) {
        width = (ScreenWidth - 2 * space_For_LeftAndRight);
    }
    _width = width;
}
-(void)setCellEdgeInsets:(UIEdgeInsets)cellEdgeInsets{
    _cellEdgeInsets = cellEdgeInsets;
    if ([_tableview respondsToSelector:@selector(setSeparatorInset:)]) {
        [_tableview setSeparatorInset:cellEdgeInsets];
    }
    if ([_tableview respondsToSelector:@selector(setLayoutMargins:)]) {
        [_tableview setLayoutMargins:cellEdgeInsets];
    }
}

-(void)setSeparatorColor:(UIColor *)separatorColor{
    _tableview.separatorColor = separatorColor;
}

#pragma mark - 类方法
+(instancetype)promtBoxWithClipView:(UIView *)clipView{
    CPPromptBox *promtBox = [[CPPromptBox alloc]initWithClipView:clipView];
    return promtBox;
}

- (instancetype)initWithClipView:(UIView *)clipView
{
    self = [super initWithFrame:CGRectMake(100, 100, 100, 100)];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        self.direction = [self getPromitBoxDirectionWithClipView:clipView];
        self.clipView = clipView;
        
        _tableview = [[UITableView alloc]initWithFrame:CGRectMake(0, 0, self.width, 0) style:UITableViewStylePlain];
        
        [self initDataForTableView];
        [self addSubview:_tableview];
        
    }
    return self;
}

- (void)initDataForTableView{
    [_tableview registerClass:[UITableViewCell class] forCellReuseIdentifier:[UITableViewCell identifier]];
    _tableview.layer.cornerRadius = self.radiu;
    _tableview.backgroundColor = self.color;
    _tableview.dataSource = self;
    _tableview.delegate = self;
    _tableview.bounces = NO;
    _tableview.showsVerticalScrollIndicator = NO;
    _tableview.showsHorizontalScrollIndicator = NO;
    _tableview.scrollEnabled = NO;
    if ([_tableview respondsToSelector:@selector(setSeparatorInset:)]) {
        [_tableview setSeparatorInset:self.cellEdgeInsets];
    }
    if ([_tableview respondsToSelector:@selector(setLayoutMargins:)]) {
        [_tableview setLayoutMargins:self.cellEdgeInsets];
    }
    [_tableview setSeparatorColor:[UIColor darkGrayColor]];
}

- (void)refreshPromitBoxView{
    [_tableview reloadData];
    [self upDataFrame];
}

//更新frame
-(void)upDataFrame{
    CGFloat tableViewY = self.direction == PromitBoxDirection_up ? 0 : self.triangleHeight;
    self.bounds = CGRectMake(0, 0, self.width, self.titles.count * Height + self.triangleHeight);
    _tableview.frame = CGRectMake(0, tableViewY, self.width, self.titles.count * Height);
    _height = self.frame.size.height;
    
    [self promitBoxRemoveFromSuperViewWithValues:Animation_appear isDelegate:NO];
}


#pragma mark - CAAnimationDelegate
-(void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag{
    [self removeFromSuperview];
}

#pragma mark - 添加内容
- (void)addTitle:(NSString *)title image:(UIImage *)image clipBack:(CPPromptBoxClipBlock)block{
    [self.titles addObject:title];
    [self.images addObject:image];
    [self.blocks addObject:block];
    [self upDataFrame];
}

- (void)addTitle:(NSString *)title clipBack:(CPPromptBoxClipBlock)block{
    [self addTitle:title image:[[UIImage alloc] init] clipBack:^(NSIndexPath *indexPath) {
        if (block) {
            block(indexPath);
        }
    }];
}

- (void)addImage:(UIImage *)image clipBack:(CPPromptBoxClipBlock)block{
    [self addTitle:[NSString string] image:image clipBack:^(NSIndexPath *indexPath) {
        if (block) {
            block(indexPath);
        }
    }];
}


#pragma mark - UITableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.titles.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:[UITableViewCell identifier]];
    cell.backgroundColor = [UIColor clearColor];
    cell.textLabel.textAlignment = self.textAlignment;
    cell.textLabel.text = self.titles[indexPath.row];
    cell.textLabel.font = [UIFont systemFontOfSize:15];
    cell.imageView.image = Image(self.images[indexPath.row]);
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    cell.textLabel.textColor = self.textColor;
    
    if (indexPath.row == self.currentChoose && self.type == CPPromptBoxView_TYPE_Others) {
        preCell = cell;
    }
    
    return cell;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return indexPath.row == (self.titles.count - 1) ? Height + 1 : Height;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    CPPromptBoxClipBlock block = self.blocks.lastObject;
    if (block) {
        if (self.promitBoxDeleget && [self.promitBoxDeleget respondsToSelector:@selector(promptBoxSelector:indexPath:)]) {
            [self.promitBoxDeleget promptBoxSelector:block indexPath:indexPath];
            [self promitBoxRemoveFromSuperViewWithValues:Animation_disappear isDelegate:YES];
        }
    }
    preCell.textLabel.textColor = [UIColor whiteColor];
    [self promitBoxRemoveFromSuperViewWithValues:Animation_disappear isDelegate:YES];
    
}
-(void)tableView:(UITableView *)tableView didHighlightRowAtIndexPath:(NSIndexPath *)indexPath{
    UITableViewCell * cell = [tableView cellForRowAtIndexPath:indexPath];
    cell.backgroundColor = [CP_16ToUicolor cptoUIColorByStr:@"414143"];
}

-(void)tableView:(UITableView *)tableView didUnhighlightRowAtIndexPath:(NSIndexPath *)indexPath{
    UITableViewCell * cell = [tableView cellForRowAtIndexPath:indexPath];
    cell.backgroundColor = [UIColor clearColor];
}

-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {
        [cell setSeparatorInset:self.cellEdgeInsets];
    }
    
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        [cell setLayoutMargins:self.cellEdgeInsets];
    }
}

//缩放
- (void)promitBoxRemoveFromSuperViewWithValues:(NSArray *)values isDelegate:(BOOL)isDelegate{
    CAKeyframeAnimation *keyAnimation = [CAKeyframeAnimation animation];
    keyAnimation.keyPath = @"transform.scale";
    keyAnimation.delegate = isDelegate == YES ? self : nil;
    keyAnimation.values = values;
    keyAnimation.duration = .3;
    keyAnimation.removedOnCompletion = YES;
    [self.layer addAnimation:keyAnimation forKey:nil];
}


//获取视图的显示方向
-(PromitBoxDirection)getPromitBoxDirectionWithClipView:(UIView *)clipView{
    PromitBoxDirection direction;
    self.clipViewCenterInWindow = [clipView.superview convertPoint:clipView.center toView:getWindow];
    CGPoint centerP = self.clipViewCenterInWindow;
    CGFloat ScreenCenterY = ScreenHeight ;
    if (centerP.y > ScreenCenterY) {
        direction = PromitBoxDirection_up;
    }else{
        direction = PromitBoxDirection_down;
    }
    return direction;
}


//获取视图的显示位置
- (CGPoint)getPromitBoxPostionWithClipView:(UIView *)clipView{
    
    //获取点击视图的中心点坐标
    CGPoint centerP = self.clipViewCenterInWindow;
    
    //获取点击视图的高
    CGFloat height_ClipView = CGRectGetHeight(clipView.frame);
    
    //获取自身self的宽
    CGFloat width_self = self.width;
    
    //修改显示距离的 Y 轴偏差
    if (self.direction == PromitBoxDirection_up) {
        centerP.y -= (height_ClipView * .5);
    }else{
        centerP.y += (height_ClipView * .5);
    }
    
    //提示框的左边和右边是否有超出屏幕
    CGFloat disForleft = centerP.x - (width_self * .5);
    CGFloat disForRight = (ScreenWidth - centerP.x - (width_self * .5));
    
    CGFloat offsetX = width_self * .5;
    
    if (disForleft < 0) {
        offsetX -= (fabs(disForleft) +  space_For_LeftAndRight); //向右偏移量
    }
    
    if (disForRight < 0) {
        offsetX += fabs(disForRight) +  space_For_LeftAndRight; //向左偏移量
    }
    
    //设置锚点
    self.layer.anchorPoint = CGPointMake(offsetX/(width_self * 1.0), self.direction == PromitBoxDirection_up ? 1 : 0);
    
    return centerP;
}

//获取三角形顶点坐标
- (CGPoint)getTriangleTopWithWidth:(CGFloat)width height:(CGFloat)height{
    
    CGPoint pointP = CGPointMake(width * self.layer.anchorPoint.x, 0);
    
    if (self.direction == PromitBoxDirection_up) {
        pointP.y = height;
    }else{
        pointP.y = 0;
    }
    
    return pointP;
}


-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event{
    if ([_tableview pointInside:point withEvent:event] == YES) {
        return _tableview;
    }else{
        return [super hitTest:point withEvent:event];
    }
}

//-(void)tableView:(UITableView *)tableView didDeselectRowAtIndexPath:(NSIndexPath *)indexPath
//{
//        NSLog(@"%s",__func__);
//}


- (void)drawRect:(CGRect)rect {
    
    CGFloat width = rect.size.width;
    CGFloat height = rect.size.height;
    
    self.layer.position = [self getPromitBoxPostionWithClipView:self.clipView];
    self.triangleTopPoint = [self getTriangleTopWithWidth:width height:height];   //三角形顶点
    
    
    UIGraphicsBeginImageContextWithOptions(rect.size, NO, 0);
    UIBezierPath *path =  [UIBezierPath bezierPathWithRect:rect];
    [self.color set];
    [path fill];
    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    
    path =  [UIBezierPath bezierPath];
    
    CGFloat radiu = self.radiu;
    
    //右上两点
    CGPoint rightUpStartP = CGPointMake(width - radiu, 0);
    CGPoint rightUpEndP = CGPointMake(width, radiu);
    
    //右下两点
    CGPoint rightDownStartP = CGPointMake(width,height - radiu);
    CGPoint rightDownEndP = CGPointMake(width - radiu, height);
    
    //左下两点
    CGPoint leftUpStartP = CGPointMake(0, radiu);
    CGPoint leftUpEndP = CGPointMake(radiu, 0);
    
    //左上两点
    CGPoint leftDownStartP = CGPointMake(radiu,height);
    CGPoint leftDownEndP = CGPointMake(0, height - radiu);
    
    //四个角的控制点
    CGPoint rightUpP_ctr = CGPointMake(width, 0);
    CGPoint rightDownP_ctr = CGPointMake(width, rect.size.height);
    CGPoint leftUpP_ctr = CGPointMake(0, 0);
    CGPoint leftDownP_ctr = CGPointMake(0, rect.size.height);
    
    CGFloat topDistance = self.triangleHeight;  //三角形高度
    
    
    CGPoint topP = self.triangleTopPoint;
    CGFloat triangleCentX = topP.x;
    
    if (triangleCentX > rightUpStartP.x) {
        triangleCentX = rightUpStartP.x - self.triangleBottomWidth ;
    }else if(triangleCentX <= leftDownStartP.x){
        triangleCentX = leftDownStartP.x + self.triangleBottomWidth ;
    }
    
    
    CGPoint leftP = CGPointMake(triangleCentX - self.triangleBottomWidth , topP.y);  //三角行左边点
    CGPoint rightP = CGPointMake(triangleCentX + self.triangleBottomWidth , topP.y); //三角行右边点
    
    
    if (self.direction == PromitBoxDirection_up) {
        rightDownStartP.y -= topDistance;
        rightDownEndP.y -= topDistance;
        leftDownStartP.y -= topDistance;
        leftDownEndP.y -= topDistance;
        rightDownP_ctr.y -= topDistance;
        leftDownP_ctr.y -= topDistance;
        leftP.y -= topDistance;
        rightP.y -= topDistance;
    }else{
        rightUpStartP.y += topDistance;
        rightUpEndP.y += topDistance;
        leftUpStartP.y += topDistance;
        leftUpEndP.y += topDistance;
        leftUpP_ctr.y += topDistance;
        rightUpP_ctr.y += topDistance;
        leftP.y += topDistance;
        rightP.y += topDistance;
    }
    
    
    //连线
    [path moveToPoint:rightUpStartP];
    [path addQuadCurveToPoint:rightUpEndP controlPoint:rightUpP_ctr];
    [path addLineToPoint:rightDownStartP];
    [path addQuadCurveToPoint:rightDownEndP controlPoint:rightDownP_ctr];
    [path addLineToPoint:leftDownStartP];
    [path addQuadCurveToPoint:leftDownEndP controlPoint:leftDownP_ctr];
    [path addLineToPoint:leftUpStartP];
    [path addQuadCurveToPoint:leftUpEndP controlPoint:leftUpP_ctr];
    
    [path moveToPoint:topP];
    [path addLineToPoint:leftP];
    [path addLineToPoint:rightP];
    [path closePath];
    [path addClip];
    [image drawInRect:rect];
}

-(void)dealloc{
    _promitBoxDeleget = nil;
    _images = nil;
    _titles = nil;
    _blocks = nil;
    _color = nil;
    _textColor = nil;
    _clipView = nil;
    _tableview = nil;
}

@end


@implementation UITableViewCell (Identifier)
+(NSString *)identifier{
    return @"identifier_";
}
@end
